{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tasks","setTasks","input","setInput","check","setCheck","completeTask","removeTask","index","storedTasks","splice","className","type","onChange","event","target","value","onClick","push","newTask","map","task","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAmDeA,EA/CH,WACV,MAA0BC,mBAAS,CAAC,SAAU,SAAU,WAAxD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,SAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAWMC,EAAe,WACnBD,GAAUD,IAGNG,EAAa,SAACC,GAClB,IAAMC,EAAW,YAAOT,GACxBS,EAAYC,OAAOF,EAAO,GAC1BP,EAASQ,IAGX,OACE,sBAAKE,UAAW,UAAhB,UACE,sBAAKA,UAAW,SAAhB,UACA,2CACA,uBAAOC,KAAK,OAAOC,SAxBD,SAACC,GACrBX,EAASW,EAAMC,OAAOC,QAuBwBA,MAAOd,IACnD,wBAAQe,QAAS,kBAtBL,SAACf,GACf,IAAMO,EAAW,YAAOT,GACxBS,EAAYS,KAAKhB,GACjBD,EAASQ,GACTN,EAAS,IAkBgBgB,CAAQjB,IAA/B,oBAEA,oBAAIS,UAAW,cAAf,SACGX,EAAMoB,KAAI,SAACC,EAAMb,GAChB,OACE,sBAAKG,UAAW,QAAhB,UACA,oBAAgBA,UAAWP,EAAQ,KAAO,SAA1C,SAAqDiB,GAA5Cb,GACT,uBAAOI,KAAK,WAAWK,QAASX,IAChC,wBAAQW,QAASV,EAAjB,SAA6B,mBAAGe,MAAM,mCC7BnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.477b52a1.chunk.js","sourcesContent":["import { useState } from \"react/cjs/react.development\"\nimport './App.css';\n\n\nconst App = () => {\n  const [tasks, setTasks] = useState([\"Task 1\", \"Task 2\", \"Task 3\"])\n  const [input, setInput] = useState(\"\")\n  const [check, setCheck] = useState(\"false\")\n  const changeHandler = (event) => {\n    setInput(event.target.value);\n  }\n  const newTask = (input) => {\n    const storedTasks = [...tasks]\n    storedTasks.push(input)\n    setTasks(storedTasks)\n    setInput(\"\")\n  }\n\n  const completeTask = () => {\n    setCheck(!check)\n  }\n\n  const removeTask = (index) => {\n    const storedTasks = [...tasks]\n    storedTasks.splice(index, 1)\n    setTasks(storedTasks)\n  }\n\n  return (\n    <div className={\"mainDiv\"}>\n      <div className={\"topBox\"}>\n      <h1>Task List</h1>\n      <input type=\"text\" onChange={changeHandler} value={input}/>\n      <button onClick={() => newTask(input)}>Add</button>\n      </div>\n      <ul className={\"liParentBox\"}>\n        {tasks.map((task, index) => {\n          return (\n            <div className={\"liBox\"}>\n            <li key={index} className={check ? null : \"strike\"}>{task}</li>\n            <input type=\"checkbox\" onClick={completeTask}/>\n            <button onClick={removeTask}><i class=\"far fa-trash-alt\"></i></button>\n            </div>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}